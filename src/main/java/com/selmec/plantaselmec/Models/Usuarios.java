package com.selmec.plantaselmec.Models;
// Generated Oct 20, 2014 5:05:41 PM by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.jboss.logging.Logger;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

/**
 * Usuarios generated by hbm2java
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@Entity
@Table(name = "usuarios", catalog = "test"
)
public class Usuarios implements java.io.Serializable, UserDetails {

    private Integer id;
    private String nombres;
    private String apellidos;
    private String email;    
    private String password;
    private Set ensamblebases = new HashSet();
    private Set<Rol> roles = new HashSet();

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "nombres", nullable = false, length = 50)
    public String getNombres() {
        return this.nombres;
    }

    public void setNombres(String nombres) {
        this.nombres = nombres;
    }

    @Column(name = "apellidos", nullable = false, length = 50)
    public String getApellidos() {
        return this.apellidos;
    }

    public void setApellidos(String apellidos) {
        this.apellidos = apellidos;
    }

    @Column(name = "email", nullable = false, length = 50)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarios")
    public Set getEnsamblebases() {
        return this.ensamblebases;
    }

    public void setEnsamblebases(Set ensamblebases) {
        this.ensamblebases = ensamblebases;
    }

    @Column(name = "password", nullable = false, length = 50)
    @Override
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Boolean HasRole(String rol_s) {
        for (GrantedAuthority authority : this.getAuthorities()) {
            logger.info(rol_s);
            if (authority.getAuthority() == null ? rol_s == null : authority.getAuthority().equals(rol_s)) {
                return true;
            }
        }
        return false;
    }

    public Boolean HasAnyRole(String roles) {
        for (String rol_s : roles.split(",")) {
            logger.info(rol_s);
            if (HasRole(rol_s)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        if (roles == null) {
            return Collections.emptyList();
        }
        Set<GrantedAuthority> authorities = new HashSet<>();
        for (Object role : roles) {
            authorities.add(new SimpleGrantedAuthority(((Rol) role).getNbRol().trim()));

        }
        return authorities;
    }

    @Override
    public String getUsername() {
        return this.email;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    /**
     * @return the roles
     */
    public Set<Rol> getRoles() {
        return roles;
    }

    /**
     * @param roles the roles to set
     */
    public void setRoles(Set<Rol> roles) {
        this.roles = roles;
    }

    @Override
    public String toString() {
        return String.format("%s %s", this.nombres, this.apellidos);
    }

    private final Logger logger = Logger.getLogger(Usuarios.class);
}
